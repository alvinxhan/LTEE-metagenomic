######################################################
#
# Make a copy of this file and edit it to your liking
#
######################################################

# Which population to plot
populations = ['p1','p1','p1']
# Which range of generations to plot
tmin = 0
tmax = 60000

# Output filename
filename = parse_file.figure_directory+'supplemental_p1_threeway.pdf'

# Mininum coverage for frequency estimation vs interpolation 
min_coverage = 10

PLOT_FMINOR = [False,True,False]
PLOT_FMAJOR = [True, False,False]

COLORED_LINEWIDTH=1
PLOT_APPEARANCE_TIME=False

additional_titles = ["Majority", "Minority", "Sub-minority"]

####################################################################
#
#  Function controlling which mutations are colored
#
#      Returns: true for colored
#               false for not colored
#
####################################################################
def color_condition(population_idx, location, gene_name, var_type, f, L, extra_data):
    #
    # location = genome coordinate in REL606 reference
    # gene_name = name of gene ('intergenic' of not in gene)
    # var_type = { 'non': nonsynonymous SNP,
    #              'syn': synonymous SNP,
    #              'promoter': SNP w/in X bp of gene start
    #              'intergenic': SNP not in first 3 categories
    #              'sv': structural variant
    # f = interpolation function for mutation frequency
    #     i.e., f(1000) = interpolated frequency at generation 1000
    # L = haplotype classification
    # extra_data = used for debugging purposes
    #
    ###############################################################
    condition = False
            
    if population_idx==0:
        if L(61000)==parse_file.clade_hmm_states['FM']:
            if f(50000)>0.5:
                condition=True
    
    if population_idx==1:
        if L(61000)==parse_file.clade_hmm_states['Fm']: #L(46000)==parse_file.clade_hmm_states['Fm']:
            condition=True
            
    if population_idx==2:
        if L(61000)==parse_file.clade_hmm_states['E']:
            if f(46000)>0.8 and L(46000)==parse_file.clade_hmm_states['Pm']:
                condition=True
    
    # Examples:
    # 
    # Mutation is in the majority at the end of the experiment
    # condition = f(60000) > 0.5
    #
    # Mutation is a structural variant in the nadR gene
    # condition = (gene_name == 'nadR') and var_type='sv'
    #
    # Mutation is in one of the mut* genes
    # condition = gene_name.startswith('mut')
    # ... 
    
    return condition
